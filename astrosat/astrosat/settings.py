"""
Django settings for astrosat project.

Generated by 'django-admin startproject' using Django 2.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import sys
from configparser import ConfigParser, NoOptionError

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# FOR THE PURPOSES OF THIS TEST,
# I AM NOT ASKING USERS TO CREATE A CONFIG FILE;
# I'LL JUST DO IT FOR THEM HERE...

# CONF_PATH = os.path.join(os.path.expanduser('~'), '.config', 'astrosat.conf')
# parser = ConfigParser()
# parser.read(CONF_PATH)

config_string = """
[settings]
secret_key=1p@y9!m@@%o3*o4-u*x)!-rnn*3^ct9c1cswa4w)r9g^1(@(k4
static_root={STATIC_ROOT}
allowed_hosts=localhost

[database]
engine=django.db.backends.sqlite3
name={DATABASE_NAME}

[tasks]
broker=rabbitmq

[help]
email=allyn.treshansky@gmail.com
code_url=https://github.com/allynt/astrosat

[debug]
debug=false
cdn=true
""".format(
    STATIC_ROOT=os.path.join(BASE_DIR, "static"),
    DATABASE_NAME=os.path.join(BASE_DIR, "db.sqlite3"),
)
parser = ConfigParser()
parser.read_string(config_string)
# ...PLEASE RESUME YOU'RE NORMAL DJANGO-ING

SECRET_KEY = parser.get('settings', 'secret_key', raw=True)
DEBUG = parser.getboolean('debug', 'debug')
CDN = parser.getboolean('debug', 'cdn')

try:
    ALLOWED_HOSTS = parser.get('settings', 'allowed_hosts').split(',')
except NoOptionError:
    assert DEBUG, "ALLOWED_HOSTS is required if DEBUG is set to 'false'"
    ALLOWED_HOSTS = []


SITE_ID = 1  # this value is potentially reset by "astrosat/middleware/t_dynamic_sites.py"
DEFAULT_SITE_ID = 1  # and in-case it isn't reset, it will be bound to this value

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    # task management...
    'django_celery_results',
    'django_celery_beat',
    # compress & compile static files...
    'compressor',
    # restful api stuff...
    'django_filters',
    'rest_framework',
    # main astrosat proj/app...
    'astrosat',
    # nasa facilities app...
    # 'facilities',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # allows site to be set dynamically based on request URL...
    'astrosat.middleware.dynamic_sites.DynamicSitesMiddleware',
]

ROOT_URLCONF = 'astrosat.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # added some context_processors to get access to some of the astrosat.conf settings...
                'astrosat.context_processors.astrosat_debug',
                'astrosat.context_processors.astrosat_cdn',
            ],
        },
    },
]

WSGI_APPLICATION = 'astrosat.wsgi.application'

# API

REST_FRAMEWORK = {
#     # Use Django's standard `django.contrib.auth` permissions,
#     # or allow read-only access for unauthenticated users.
#     'DEFAULT_PERMISSION_CLASSES': [
#         'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
#     ]
    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 100,
}

# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

if 'test' in sys.argv:
    # actually testing w/ PostGreSQL is r e a l l y  s l o w
    # so for testing, just use SQLite3
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'test_db.sqlite3'),
        }
    }

    # also, here is a convenient way to test emails in unit tests w/out actually sending messages...
    # (when unspecified the default email_backend is 'django.core.mail.backends.smtp.EmailBackend')
    EMAIL_BACKEND = 'django.core.mail.backends.locmem.EmailBackend'

else:
    default_database = {
        'ENGINE': parser.get('database', 'engine'),
        'NAME': parser.get('database', 'name'),
    }
    if parser.has_option('database', 'user'):
        default_database['USER'] = parser.get('database', 'user')
    if parser.has_option('database', 'host'):
        default_database['HOST'] = parser.get('database', 'host')
    if parser.has_option('database', 'port'):
        default_database['PORT'] = parser.get('database', 'port')
    if parser.has_option('database', 'password'):
        default_database['PASSWORD'] = parser.get('database', 'password', raw=True),

    DATABASES = {
        'default': default_database
    }


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
# TODO: TURNED THIS OFF FOR TESTING PURPOSES
#    {
#        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
#    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# tasks

TASK_BROKERS = {
    "rabbitmq": "amqp",
    # TODO: SUPPORT FOR MORE SCHEDULERS
}
CELERY_BROKER_URL = "{0}://localhost".format(TASK_BROKERS[parser.get('tasks', 'broker')])
CELERY_ACCEPT_CONTENT = ['json']
CELERY_RESULT_BACKEND = 'django-db'
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, parser.get('settings', 'static_root', raw=True))


STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    # compressed files...
    'compressor.finders.CompressorFinder',
)

COMPRESS_ENABLED = True
COMPRESS_ROOT = STATIC_ROOT
COMPRESS_URL = STATIC_URL
COMPRESS_OFFLINE = True  # if template variables are used inside {% compress %} tags, they must be listed here !!
COMPRESS_PRECOMPILERS = (
    ('text/coffeescript', 'coffee --compile --stdio'),
    ('text/less', 'lessc {infile} {outfile}'),
    ('text/x-sass', 'sass {infile} {outfile}'),
    ('text/x-scss', 'sass --scss {infile} {outfile}'),
    ('text/stylus', 'stylus < {infile} > {outfile}'),
)

# where to get help...
ASTROSAT_EMAIL = parser.get('help', 'email')
ASTROSAT_CODE_URL = parser.get('help', 'code_url')
